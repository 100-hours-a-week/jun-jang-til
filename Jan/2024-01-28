# TIL Template

## 날짜: 2024-01-28

### 새로 배운 내용
#### 주제 1: 주제에 대한 설명
|  | 정의 | 비고 |
| --- | --- | --- |
| Git | 컴퓨터 파일의 변경사항을 추적하고, 여러 사용자들 간에 작업을 조율하기 위한 분산 버전 관리 시스템 |  |
| GitHub | Git 저장소 호스팅을 지원하는 오픈 소스 |  |
| 중앙 집중식 버전 관리 시스템 | 다른 사람들과 모두 한꺼번에 같은 장소에서 버전을 관리 | 인터넷 연결에 전적으로 의지해야하며, 동시에 같은 내용을 작업하기 어려움 |
| 분산 버전 관리 시스템 | 각자 로컬 시스템에 복제하여, 버전 관리를 독립적으로 수행하고 합치는 시스템 | 인터넷 연결이 끊겨도 가능하지만, 관리가 힘듬 |
| 브랜치 | 코드의 다른 버전들을 관리하기 위해 사용되는 독립적인 작업 흐름 |  |
| 3-way merge | 병합할 두 브랜치와 공통의 조상, 총 3개의 커밋을 이용하여 병합 |  |
| fast-forward merg | 새 브랜치를 만들고, 해당 브랜치에 변경사항을 커밋한 후 메인 브랜치에 그대로 적용하는 병합 방법 |  |
| squash and merge | 새 브랜치의 커밋기록을 메인 브랜치에 하나로 넣는것 ⇒ 마치 쥐어 짜듯 |  |
| rebase & merge | 브랜치 줄이 다양해지는 것을 방지하기 위해 간단한 브랜치들을  베이스에 이어붙이는 방식 ⇒Conflict 가능성 있음 |  |
| orgin | 본인의 작업이 반영되는 원격 저장소 |  |
| upStream | 변경사항을 가져오거나 비교할 기준점이 되는 원본 저장소 |  |
| git flow | 배포 브랜치 / 통합된 테스트 브랜치/ 기능 개발 브랜치 로 나누어서 진행하는 전략 |  |
| commit | 작업내용을 저장소에 기록하는 작업 단위 |  |
| working directory | 현재 작업 중인 파일이 있는 로컬 디렉토리 |  |
| Repository | 파일과 커밋 내역을 저장하는 저장소 |  |
| organization | 팀이나 회사에서 관리하는 저장소의 그룹 |  |
| Merge | 여러 브랜치의 변경사항을 통합 |  |
| fork | 다른 사람의 저장소를 복사하여 다른 저장소로 코드를 복사하는것 |  |
| pull request | 포크나 브랜치에서 변경 내용을 원 저장소에 병합 요청을 하는것 |  |

# 웹 기초

---

|  | 정의 | 비고 |
| --- | --- | --- |
| 클라이언트 | 서비스에 자원을 요청하는 주체  | 이때 서버 또한 클라이언트가 될 수 있다. |
| 서버 |  자원을 관리 하고 클라이언트의 요청을 처리하고 결과를 반환하는 주체 |  |
| 프론트엔드 | 웹이나 앱의 사용자에게 직접 보여지는 부분 (음식을 내놓는 웨이터) |  |
| 백엔드 | 사용자에게 직접 보이지 않는 서버의 개발 부분(주방에서 요리하는 주방장) |  |
| HTTP | Hypertext Transfer Protocol 로 HTML 파일,이미지, 영상 등을 전송하는 프로토콜 | 데이터를 전송할 때 표준화된 방법으로 보내어 통일성을 높임
URL을 입력하면, 해당 요청을 받아 해당하는 데이터를 보낸다 (HTML 등) |
| Node.js | 어디서나, 자바스크립트를 사용하기 위한 런타임 환경(자바 스크립트가 실행되는 공간)  | 프레임 워크 X , 런타임 O |
| Express.js | Node.js 기반으로 작동하는 프레임 워크  | Node.js 만 사용하면 복잡하기 때문에 Express.js 프레임워크를 사용(Like. 패키지, JDK?) |
| Pakage.json | 자바 스크립트 프로젝트의 설정과 의존성 (프로젝트와 관련된 다른 프로그램이나, 라이브러리)을 명세 하는 파일 | Pakage.json에 명세되있는 라이브러리를 
손 쉽게 설치 가능 |
| PM2 | Process Management 로 Node,js 기반의 서버 프로세스 관리 도구, node.js의 프로세스를 용이하게 관리하기 위해 사용 ⇒ 안정성 향상 | Pm2의 클러스터를 활용하면 12개의 스레드를 사용 가능 (Node.js는 싱글쓰레드!)  |
| 코드 컨벤션 | 코드(스타일) 규약 ⇒ 코드의 가독성을 높이고 협업에 용이하기 위해 사용 | 스네이크 케이스, 카멜 케이스 등의 방법을 도입(tmi. 파이썬은 스네이크 케이스로 하기로 약속되어있음) (ESLint: 오류검사, Prettier: 코드 정리) |


### 오늘의 도전 과제와 해결 방법
- 도전 과제 1: TaskScheduler를 활용한 반납처리

### 오늘의 회고
- 즐거웠다.

