# TIL Template

## 날짜: 2025-02-04

### 새로 배운 내용
#### 주제 1: 주제에 대한 설명
	정의	비고
모놀리식 아키텍처	단일 코드 베이스를 기반으로 하는 소프트웨어 설계 방식	배포 및 구현은 빠르나,
결합도가 매우 높기 때문에 확장이나 유지 보수는 어렵다는 단점이 있다.
마이크로서비스 아키텍처	 애플리케이션을 여러개의 독립적이고 작은 서비스들로 나누어 개발하는 소프트웨어 설계 방식	대규모 프로젝트에서 주로 활용되고
관리 및 확장이 용이하다는 장점이 있으나 만능은 아니다
서버리스 아키텍처	아키텍처는 개발자가 서버의 관리와 확장 문제를 신경쓰지 않고 비즈니스 로직에 집중할 수 있도록 하는 클라우드 컴퓨팅 모델	함수단위로 실행된다.
리소스 절약의 효율성은 높으나,
모니터링 및 디버깅, 상태 관리가 어려
결합도	모듈간 의존성의 정도 , 결합도가 낮아지는 방향으로 설계	
응집도	모듈 내의 구성요소들이 얼마나 밀접하게 관련되어 있는지를 나타내는 지표	
확장성	시스템이 데이터, 트래픽, 기능 요구 증가에 대응할 수 있는 능력	수직적 확장 (스케일업)
- 서버의 성능을 높이는 것
수평정 확장 (스케일 아웃)
 - 서버의 대수를 늘리는것
⇒성능적 향상을 원하면 스케일업, 트래픽 분산을 원하면 스케일 아
DevOps	소프트웨어 개발과 IT 운영을 통합하는 문화와 실천 방식 
(개발과 배포를 동시에 관리)	
CI/CD	지속적인 배포와 통합	흔하게 사용하는 Git flow 전략에서는 Dev 브랜치로 지속적을 통합하고, release(배포) 브랜치로 배포하는 방식으로 활용
GitHub Flow 같은경우는 release 브랜치로 통합하면서 배포까지 진행 하는 방식


### 오늘의 도전 과제와 해결 방법
- 도전 과제 1: 과제 개선

### 오늘의 회고
- 즐거웠다.

